/* !!! THIS FILE WAS AUTO-GENERATED BY `npm run gen` !!! */
import * as K from "./kinds";

export interface Printable {
  loc?: K.SourceLocationKind | null;
}

export interface SourceLocation {
  type: "SourceLocation";
  start: K.PositionKind;
  end: K.PositionKind;
  source?: string | null;
}

export interface Node {
  loc?: K.SourceLocationKind | null;
  type: "Node";
  comments?: K.CommentKind[] | null;
}

export interface Comment {
  loc?: K.SourceLocationKind | null;
  value: string;
  leading: boolean;
  trailing: boolean;
}

export interface Position {
  type: "Position";
  line: number;
  column: number;
}

export interface File {
  loc?: K.SourceLocationKind | null;
  type: "File";
  comments?: K.CommentKind[] | null;
  program: K.ProgramKind;
  name?: string | null;
}

export interface Program {
  loc?: K.SourceLocationKind | null;
  type: "Program";
  comments?: K.CommentKind[] | null;
  body: K.StatementKind[];
  directives: K.DirectiveKind[];
}

export interface Statement {
  loc?: K.SourceLocationKind | null;
  type: "Statement";
  comments?: K.CommentKind[] | null;
}

export interface Function {
  loc?: K.SourceLocationKind | null;
  type: "Function";
  comments?: K.CommentKind[] | null;
  id?: K.IdentifierKind | null;
  params: K.PatternKind[];
  body: K.BlockStatementKind | K.ExpressionKind;
  generator: boolean;
  expression: boolean;
  defaults: (K.ExpressionKind | null)[];
  rest?: K.IdentifierKind | null;
  async: boolean;
  returnType?: K.TypeAnnotationKind | null;
  typeParameters?: K.TypeParameterDeclarationKind | null;
}

export interface Pattern {
  loc?: K.SourceLocationKind | null;
  type: "Pattern";
  comments?: K.CommentKind[] | null;
}

export interface Expression {
  loc?: K.SourceLocationKind | null;
  type: "Expression";
  comments?: K.CommentKind[] | null;
}

export interface Identifier {
  loc?: K.SourceLocationKind | null;
  type: "Identifier";
  comments?: K.CommentKind[] | null;
  name: string;
  optional: boolean;
  typeAnnotation?: K.TypeAnnotationKind | K.TSTypeAnnotationKind | null;
}

export interface BlockStatement {
  loc?: K.SourceLocationKind | null;
  type: "BlockStatement";
  comments?: K.CommentKind[] | null;
  body: K.StatementKind[];
  directives: K.DirectiveKind[];
}

export interface EmptyStatement {
  loc?: K.SourceLocationKind | null;
  type: "EmptyStatement";
  comments?: K.CommentKind[] | null;
}

export interface ExpressionStatement {
  loc?: K.SourceLocationKind | null;
  type: "ExpressionStatement";
  comments?: K.CommentKind[] | null;
  expression: K.ExpressionKind;
}

export interface IfStatement {
  loc?: K.SourceLocationKind | null;
  type: "IfStatement";
  comments?: K.CommentKind[] | null;
  test: K.ExpressionKind;
  consequent: K.StatementKind;
  alternate?: K.StatementKind | null;
}

export interface LabeledStatement {
  loc?: K.SourceLocationKind | null;
  type: "LabeledStatement";
  comments?: K.CommentKind[] | null;
  label: K.IdentifierKind;
  body: K.StatementKind;
}

export interface BreakStatement {
  loc?: K.SourceLocationKind | null;
  type: "BreakStatement";
  comments?: K.CommentKind[] | null;
  label?: K.IdentifierKind | null;
}

export interface ContinueStatement {
  loc?: K.SourceLocationKind | null;
  type: "ContinueStatement";
  comments?: K.CommentKind[] | null;
  label?: K.IdentifierKind | null;
}

export interface WithStatement {
  loc?: K.SourceLocationKind | null;
  type: "WithStatement";
  comments?: K.CommentKind[] | null;
  object: K.ExpressionKind;
  body: K.StatementKind;
}

export interface SwitchStatement {
  loc?: K.SourceLocationKind | null;
  type: "SwitchStatement";
  comments?: K.CommentKind[] | null;
  discriminant: K.ExpressionKind;
  cases: K.SwitchCaseKind[];
  lexical: boolean;
}

export interface SwitchCase {
  loc?: K.SourceLocationKind | null;
  type: "SwitchCase";
  comments?: K.CommentKind[] | null;
  test?: K.ExpressionKind | null;
  consequent: K.StatementKind[];
}

export interface ReturnStatement {
  loc?: K.SourceLocationKind | null;
  type: "ReturnStatement";
  comments?: K.CommentKind[] | null;
  argument?: K.ExpressionKind | null;
}

export interface ThrowStatement {
  loc?: K.SourceLocationKind | null;
  type: "ThrowStatement";
  comments?: K.CommentKind[] | null;
  argument: K.ExpressionKind;
}

export interface TryStatement {
  loc?: K.SourceLocationKind | null;
  type: "TryStatement";
  comments?: K.CommentKind[] | null;
  block: K.BlockStatementKind;
  handler?: K.CatchClauseKind | null;
  handlers: K.CatchClauseKind[];
  guardedHandlers: K.CatchClauseKind[];
  finalizer?: K.BlockStatementKind | null;
}

export interface CatchClause {
  loc?: K.SourceLocationKind | null;
  type: "CatchClause";
  comments?: K.CommentKind[] | null;
  param?: K.PatternKind | null;
  guard?: K.ExpressionKind | null;
  body: K.BlockStatementKind;
}

export interface WhileStatement {
  loc?: K.SourceLocationKind | null;
  type: "WhileStatement";
  comments?: K.CommentKind[] | null;
  test: K.ExpressionKind;
  body: K.StatementKind;
}

export interface DoWhileStatement {
  loc?: K.SourceLocationKind | null;
  type: "DoWhileStatement";
  comments?: K.CommentKind[] | null;
  body: K.StatementKind;
  test: K.ExpressionKind;
}

export interface ForStatement {
  loc?: K.SourceLocationKind | null;
  type: "ForStatement";
  comments?: K.CommentKind[] | null;
  init?: K.VariableDeclarationKind | K.ExpressionKind | null;
  test?: K.ExpressionKind | null;
  update?: K.ExpressionKind | null;
  body: K.StatementKind;
}

export interface Declaration {
  loc?: K.SourceLocationKind | null;
  type: "Declaration";
  comments?: K.CommentKind[] | null;
}

export interface VariableDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "VariableDeclaration";
  comments?: K.CommentKind[] | null;
  kind: "var" | "let" | "const";
  declarations: (K.VariableDeclaratorKind | K.IdentifierKind)[];
}

export interface ForInStatement {
  loc?: K.SourceLocationKind | null;
  type: "ForInStatement";
  comments?: K.CommentKind[] | null;
  left: K.VariableDeclarationKind | K.ExpressionKind;
  right: K.ExpressionKind;
  body: K.StatementKind;
  each: boolean;
}

export interface DebuggerStatement {
  loc?: K.SourceLocationKind | null;
  type: "DebuggerStatement";
  comments?: K.CommentKind[] | null;
}

export interface FunctionDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "FunctionDeclaration";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
  params: K.PatternKind[];
  body: K.BlockStatementKind | K.ExpressionKind;
  generator: boolean;
  expression: boolean;
  defaults: (K.ExpressionKind | null)[];
  rest?: K.IdentifierKind | null;
  async: boolean;
  returnType?: K.TypeAnnotationKind | null;
  typeParameters?: K.TypeParameterDeclarationKind | null;
}

export interface FunctionExpression {
  loc?: K.SourceLocationKind | null;
  type: "FunctionExpression";
  comments?: K.CommentKind[] | null;
  id?: K.IdentifierKind | null;
  params: K.PatternKind[];
  body: K.BlockStatementKind | K.ExpressionKind;
  generator: boolean;
  expression: boolean;
  defaults: (K.ExpressionKind | null)[];
  rest?: K.IdentifierKind | null;
  async: boolean;
  returnType?: K.TypeAnnotationKind | null;
  typeParameters?: K.TypeParameterDeclarationKind | null;
}

export interface VariableDeclarator {
  loc?: K.SourceLocationKind | null;
  type: "VariableDeclarator";
  comments?: K.CommentKind[] | null;
  id: K.PatternKind;
  init?: K.ExpressionKind | null;
}

export interface ThisExpression {
  loc?: K.SourceLocationKind | null;
  type: "ThisExpression";
  comments?: K.CommentKind[] | null;
}

export interface ArrayExpression {
  loc?: K.SourceLocationKind | null;
  type: "ArrayExpression";
  comments?: K.CommentKind[] | null;
  elements: (K.ExpressionKind | K.SpreadElementKind | K.RestElementKind | null)[];
}

export interface ObjectExpression {
  loc?: K.SourceLocationKind | null;
  type: "ObjectExpression";
  comments?: K.CommentKind[] | null;
  properties: (K.PropertyKind | K.ObjectMethodKind | K.ObjectPropertyKind | K.SpreadPropertyKind | K.SpreadElementKind)[];
}

export interface Property {
  loc?: K.SourceLocationKind | null;
  type: "Property";
  comments?: K.CommentKind[] | null;
  kind: "init" | "get" | "set";
  key: K.LiteralKind | K.IdentifierKind | K.ExpressionKind;
  value: K.ExpressionKind | K.PatternKind;
  method: boolean;
  shorthand: boolean;
  computed: boolean;
  decorators?: K.DecoratorKind[] | null;
}

export interface Literal {
  loc?: K.SourceLocationKind | null;
  type: "Literal";
  comments?: K.CommentKind[] | null;
  value?: string | boolean | null | number | RegExp;
  regex?: {
    "pattern": string,
    "flags": string
  } | null;
}

export interface SequenceExpression {
  loc?: K.SourceLocationKind | null;
  type: "SequenceExpression";
  comments?: K.CommentKind[] | null;
  expressions: K.ExpressionKind[];
}

export interface UnaryExpression {
  loc?: K.SourceLocationKind | null;
  type: "UnaryExpression";
  comments?: K.CommentKind[] | null;
  operator: "-" | "+" | "!" | "~" | "typeof" | "void" | "delete";
  argument: K.ExpressionKind;
  prefix: boolean;
}

export interface BinaryExpression {
  loc?: K.SourceLocationKind | null;
  type: "BinaryExpression";
  comments?: K.CommentKind[] | null;
  operator: "==" | "!=" | "===" | "!==" | "<" | "<=" | ">" | ">=" | "<<" | ">>" | ">>>" | "+" | "-" | "*" | "/" | "%" | "**" | "&" | "|" | "^" | "in" | "instanceof" | "..";
  left: K.ExpressionKind;
  right: K.ExpressionKind;
}

export interface AssignmentExpression {
  loc?: K.SourceLocationKind | null;
  type: "AssignmentExpression";
  comments?: K.CommentKind[] | null;
  operator: "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | ">>>=" | "|=" | "^=" | "&=";
  left: K.PatternKind;
  right: K.ExpressionKind;
}

export interface UpdateExpression {
  loc?: K.SourceLocationKind | null;
  type: "UpdateExpression";
  comments?: K.CommentKind[] | null;
  operator: "++" | "--";
  argument: K.ExpressionKind;
  prefix: boolean;
}

export interface LogicalExpression {
  loc?: K.SourceLocationKind | null;
  type: "LogicalExpression";
  comments?: K.CommentKind[] | null;
  operator: "||" | "&&" | "??";
  left: K.ExpressionKind;
  right: K.ExpressionKind;
}

export interface ConditionalExpression {
  loc?: K.SourceLocationKind | null;
  type: "ConditionalExpression";
  comments?: K.CommentKind[] | null;
  test: K.ExpressionKind;
  consequent: K.ExpressionKind;
  alternate: K.ExpressionKind;
}

export interface NewExpression {
  loc?: K.SourceLocationKind | null;
  type: "NewExpression";
  comments?: K.CommentKind[] | null;
  callee: K.ExpressionKind;
  arguments: (K.ExpressionKind | K.SpreadElementKind)[];
}

export interface CallExpression {
  loc?: K.SourceLocationKind | null;
  type: "CallExpression";
  comments?: K.CommentKind[] | null;
  callee: K.ExpressionKind;
  arguments: (K.ExpressionKind | K.SpreadElementKind)[];
}

export interface MemberExpression {
  loc?: K.SourceLocationKind | null;
  type: "MemberExpression";
  comments?: K.CommentKind[] | null;
  object: K.ExpressionKind;
  property: K.IdentifierKind | K.ExpressionKind;
  computed: boolean;
}

export interface RestElement {
  loc?: K.SourceLocationKind | null;
  type: "RestElement";
  comments?: K.CommentKind[] | null;
  argument: K.PatternKind;
  typeAnnotation?: K.TypeAnnotationKind | K.TSTypeAnnotationKind | null;
}

export interface TypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "TypeAnnotation";
  comments?: K.CommentKind[] | null;
  typeAnnotation: K.FlowTypeKind;
}

export interface TSTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "TSTypeAnnotation";
  comments?: K.CommentKind[] | null;
  typeAnnotation: K.TSTypeKind | K.TSTypeAnnotationKind;
}

export interface SpreadElementPattern {
  loc?: K.SourceLocationKind | null;
  type: "SpreadElementPattern";
  comments?: K.CommentKind[] | null;
  argument: K.PatternKind;
}

export interface ArrowFunctionExpression {
  loc?: K.SourceLocationKind | null;
  type: "ArrowFunctionExpression";
  comments?: K.CommentKind[] | null;
  id?: null;
  params: K.PatternKind[];
  body: K.BlockStatementKind | K.ExpressionKind;
  generator: false;
  expression: boolean;
  defaults: (K.ExpressionKind | null)[];
  rest?: K.IdentifierKind | null;
  async: boolean;
  returnType?: K.TypeAnnotationKind | null;
  typeParameters?: K.TypeParameterDeclarationKind | null;
}

export interface ForOfStatement {
  loc?: K.SourceLocationKind | null;
  type: "ForOfStatement";
  comments?: K.CommentKind[] | null;
  left: K.VariableDeclarationKind | K.PatternKind;
  right: K.ExpressionKind;
  body: K.StatementKind;
}

export interface YieldExpression {
  loc?: K.SourceLocationKind | null;
  type: "YieldExpression";
  comments?: K.CommentKind[] | null;
  argument?: K.ExpressionKind | null;
  delegate: boolean;
}

export interface GeneratorExpression {
  loc?: K.SourceLocationKind | null;
  type: "GeneratorExpression";
  comments?: K.CommentKind[] | null;
  body: K.ExpressionKind;
  blocks: K.ComprehensionBlockKind[];
  filter?: K.ExpressionKind | null;
}

export interface ComprehensionBlock {
  loc?: K.SourceLocationKind | null;
  type: "ComprehensionBlock";
  comments?: K.CommentKind[] | null;
  left: K.PatternKind;
  right: K.ExpressionKind;
  each: boolean;
}

export interface ComprehensionExpression {
  loc?: K.SourceLocationKind | null;
  type: "ComprehensionExpression";
  comments?: K.CommentKind[] | null;
  body: K.ExpressionKind;
  blocks: K.ComprehensionBlockKind[];
  filter?: K.ExpressionKind | null;
}

export interface PropertyPattern {
  loc?: K.SourceLocationKind | null;
  type: "PropertyPattern";
  comments?: K.CommentKind[] | null;
  key: K.LiteralKind | K.IdentifierKind | K.ExpressionKind;
  pattern: K.PatternKind;
  computed: boolean;
}

export interface ObjectPattern {
  loc?: K.SourceLocationKind | null;
  type: "ObjectPattern";
  comments?: K.CommentKind[] | null;
  properties: (K.PropertyKind | K.PropertyPatternKind | K.SpreadPropertyPatternKind | K.SpreadPropertyKind | K.ObjectPropertyKind | K.RestPropertyKind)[];
  typeAnnotation?: K.TypeAnnotationKind | null;
  decorators?: K.DecoratorKind[] | null;
}

export interface ArrayPattern {
  loc?: K.SourceLocationKind | null;
  type: "ArrayPattern";
  comments?: K.CommentKind[] | null;
  elements: (K.PatternKind | K.SpreadElementKind | null)[];
}

export interface MethodDefinition {
  loc?: K.SourceLocationKind | null;
  type: "MethodDefinition";
  comments?: K.CommentKind[] | null;
  kind: "constructor" | "method" | "get" | "set";
  key: K.ExpressionKind;
  value: K.FunctionKind;
  computed: boolean;
  static: boolean;
  decorators?: K.DecoratorKind[] | null;
}

export interface SpreadElement {
  loc?: K.SourceLocationKind | null;
  type: "SpreadElement";
  comments?: K.CommentKind[] | null;
  argument: K.ExpressionKind;
}

export interface AssignmentPattern {
  loc?: K.SourceLocationKind | null;
  type: "AssignmentPattern";
  comments?: K.CommentKind[] | null;
  left: K.PatternKind;
  right: K.ExpressionKind;
}

export interface ClassPropertyDefinition {
  loc?: K.SourceLocationKind | null;
  type: "ClassPropertyDefinition";
  comments?: K.CommentKind[] | null;
  definition: K.MethodDefinitionKind | K.VariableDeclaratorKind | K.ClassPropertyDefinitionKind | K.ClassPropertyKind;
}

export interface ClassProperty {
  loc?: K.SourceLocationKind | null;
  type: "ClassProperty";
  comments?: K.CommentKind[] | null;
  key: K.LiteralKind | K.IdentifierKind | K.ExpressionKind;
  computed: boolean;
  value?: K.ExpressionKind | null;
  typeAnnotation?: K.TypeAnnotationKind | null;
  static: boolean;
  variance?: K.VarianceKind | "plus" | "minus" | null;
}

export interface ClassBody {
  loc?: K.SourceLocationKind | null;
  type: "ClassBody";
  comments?: K.CommentKind[] | null;
  body: (K.MethodDefinitionKind | K.VariableDeclaratorKind | K.ClassPropertyDefinitionKind | K.ClassPropertyKind | K.ClassMethodKind | K.TSDeclareMethodKind | K.TSCallSignatureDeclarationKind | K.TSConstructSignatureDeclarationKind | K.TSIndexSignatureKind | K.TSMethodSignatureKind | K.TSPropertySignatureKind)[];
}

export interface ClassDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "ClassDeclaration";
  comments?: K.CommentKind[] | null;
  id?: K.IdentifierKind | null;
  body: K.ClassBodyKind;
  superClass?: K.ExpressionKind | null;
  typeParameters?: K.TypeParameterDeclarationKind | null;
  superTypeParameters?: K.GenericTypeAnnotationKind[] | null;
  implements: K.TSExpressionWithTypeArgumentsKind[];
}

export interface ClassExpression {
  loc?: K.SourceLocationKind | null;
  type: "ClassExpression";
  comments?: K.CommentKind[] | null;
  id?: K.IdentifierKind | null;
  body: K.ClassBodyKind;
  superClass?: K.ExpressionKind | null;
  typeParameters?: K.TypeParameterDeclarationKind | null;
  superTypeParameters?: K.GenericTypeAnnotationKind[] | null;
  implements: K.TSExpressionWithTypeArgumentsKind[];
}

export interface Specifier {
  loc?: K.SourceLocationKind | null;
  type: "Specifier";
  comments?: K.CommentKind[] | null;
}

export interface ModuleSpecifier {
  loc?: K.SourceLocationKind | null;
  type: "ModuleSpecifier";
  comments?: K.CommentKind[] | null;
  local?: K.IdentifierKind | null;
  id?: K.IdentifierKind | null;
  name?: K.IdentifierKind | null;
}

export interface ImportSpecifier {
  loc?: K.SourceLocationKind | null;
  type: "ImportSpecifier";
  comments?: K.CommentKind[] | null;
  local?: K.IdentifierKind | null;
  id?: K.IdentifierKind | null;
  name?: K.IdentifierKind | null;
  imported: K.IdentifierKind;
}

export interface ImportNamespaceSpecifier {
  loc?: K.SourceLocationKind | null;
  type: "ImportNamespaceSpecifier";
  comments?: K.CommentKind[] | null;
  local?: K.IdentifierKind | null;
  id?: K.IdentifierKind | null;
  name?: K.IdentifierKind | null;
}

export interface ImportDefaultSpecifier {
  loc?: K.SourceLocationKind | null;
  type: "ImportDefaultSpecifier";
  comments?: K.CommentKind[] | null;
  local?: K.IdentifierKind | null;
  id?: K.IdentifierKind | null;
  name?: K.IdentifierKind | null;
}

export interface ImportDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "ImportDeclaration";
  comments?: K.CommentKind[] | null;
  specifiers: (K.ImportSpecifierKind | K.ImportNamespaceSpecifierKind | K.ImportDefaultSpecifierKind)[];
  source: K.LiteralKind;
  importKind: "value" | "type";
}

export interface TaggedTemplateExpression {
  loc?: K.SourceLocationKind | null;
  type: "TaggedTemplateExpression";
  comments?: K.CommentKind[] | null;
  tag: K.ExpressionKind;
  quasi: K.TemplateLiteralKind;
}

export interface TemplateLiteral {
  loc?: K.SourceLocationKind | null;
  type: "TemplateLiteral";
  comments?: K.CommentKind[] | null;
  quasis: K.TemplateElementKind[];
  expressions: K.ExpressionKind[];
}

export interface TemplateElement {
  loc?: K.SourceLocationKind | null;
  type: "TemplateElement";
  comments?: K.CommentKind[] | null;
  value: {
    "cooked": string,
    "raw": string
  };
  tail: boolean;
}

export interface SpreadProperty {
  loc?: K.SourceLocationKind | null;
  type: "SpreadProperty";
  comments?: K.CommentKind[] | null;
  argument: K.ExpressionKind;
}

export interface SpreadPropertyPattern {
  loc?: K.SourceLocationKind | null;
  type: "SpreadPropertyPattern";
  comments?: K.CommentKind[] | null;
  argument: K.PatternKind;
}

export interface AwaitExpression {
  loc?: K.SourceLocationKind | null;
  type: "AwaitExpression";
  comments?: K.CommentKind[] | null;
  argument?: K.ExpressionKind | null;
  all: boolean;
}

export interface LetStatement {
  loc?: K.SourceLocationKind | null;
  type: "LetStatement";
  comments?: K.CommentKind[] | null;
  head: K.VariableDeclaratorKind[];
  body: K.StatementKind;
}

export interface LetExpression {
  loc?: K.SourceLocationKind | null;
  type: "LetExpression";
  comments?: K.CommentKind[] | null;
  head: K.VariableDeclaratorKind[];
  body: K.ExpressionKind;
}

export interface GraphExpression {
  loc?: K.SourceLocationKind | null;
  type: "GraphExpression";
  comments?: K.CommentKind[] | null;
  index: number;
  expression: K.LiteralKind;
}

export interface GraphIndexExpression {
  loc?: K.SourceLocationKind | null;
  type: "GraphIndexExpression";
  comments?: K.CommentKind[] | null;
  index: number;
}

export interface XMLDefaultDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "XMLDefaultDeclaration";
  comments?: K.CommentKind[] | null;
  namespace: K.ExpressionKind;
}

export interface XMLAnyName {
  loc?: K.SourceLocationKind | null;
  type: "XMLAnyName";
  comments?: K.CommentKind[] | null;
}

export interface XMLQualifiedIdentifier {
  loc?: K.SourceLocationKind | null;
  type: "XMLQualifiedIdentifier";
  comments?: K.CommentKind[] | null;
  left: K.IdentifierKind | K.XMLAnyNameKind;
  right: K.IdentifierKind | K.ExpressionKind;
  computed: boolean;
}

export interface XMLFunctionQualifiedIdentifier {
  loc?: K.SourceLocationKind | null;
  type: "XMLFunctionQualifiedIdentifier";
  comments?: K.CommentKind[] | null;
  right: K.IdentifierKind | K.ExpressionKind;
  computed: boolean;
}

export interface XMLAttributeSelector {
  loc?: K.SourceLocationKind | null;
  type: "XMLAttributeSelector";
  comments?: K.CommentKind[] | null;
  attribute: K.ExpressionKind;
}

export interface XMLFilterExpression {
  loc?: K.SourceLocationKind | null;
  type: "XMLFilterExpression";
  comments?: K.CommentKind[] | null;
  left: K.ExpressionKind;
  right: K.ExpressionKind;
}

export interface XML {
  loc?: K.SourceLocationKind | null;
  type: "XML";
  comments?: K.CommentKind[] | null;
}

export interface XMLElement {
  loc?: K.SourceLocationKind | null;
  type: "XMLElement";
  comments?: K.CommentKind[] | null;
  contents: K.XMLKind[];
}

export interface XMLList {
  loc?: K.SourceLocationKind | null;
  type: "XMLList";
  comments?: K.CommentKind[] | null;
  contents: K.XMLKind[];
}

export interface XMLEscape {
  loc?: K.SourceLocationKind | null;
  type: "XMLEscape";
  comments?: K.CommentKind[] | null;
  expression: K.ExpressionKind;
}

export interface XMLText {
  loc?: K.SourceLocationKind | null;
  type: "XMLText";
  comments?: K.CommentKind[] | null;
  text: string;
}

export interface XMLStartTag {
  loc?: K.SourceLocationKind | null;
  type: "XMLStartTag";
  comments?: K.CommentKind[] | null;
  contents: K.XMLKind[];
}

export interface XMLEndTag {
  loc?: K.SourceLocationKind | null;
  type: "XMLEndTag";
  comments?: K.CommentKind[] | null;
  contents: K.XMLKind[];
}

export interface XMLPointTag {
  loc?: K.SourceLocationKind | null;
  type: "XMLPointTag";
  comments?: K.CommentKind[] | null;
  contents: K.XMLKind[];
}

export interface XMLName {
  loc?: K.SourceLocationKind | null;
  type: "XMLName";
  comments?: K.CommentKind[] | null;
  contents: string | K.XMLKind[];
}

export interface XMLAttribute {
  loc?: K.SourceLocationKind | null;
  type: "XMLAttribute";
  comments?: K.CommentKind[] | null;
  value: string;
}

export interface XMLCdata {
  loc?: K.SourceLocationKind | null;
  type: "XMLCdata";
  comments?: K.CommentKind[] | null;
  contents: string;
}

export interface XMLComment {
  loc?: K.SourceLocationKind | null;
  type: "XMLComment";
  comments?: K.CommentKind[] | null;
  contents: string;
}

export interface XMLProcessingInstruction {
  loc?: K.SourceLocationKind | null;
  type: "XMLProcessingInstruction";
  comments?: K.CommentKind[] | null;
  target: string;
  contents?: string | null;
}

export interface JSXAttribute {
  loc?: K.SourceLocationKind | null;
  type: "JSXAttribute";
  comments?: K.CommentKind[] | null;
  name: K.JSXIdentifierKind | K.JSXNamespacedNameKind;
  value?: K.LiteralKind | K.JSXExpressionContainerKind | null;
}

export interface JSXIdentifier {
  loc?: K.SourceLocationKind | null;
  type: "JSXIdentifier";
  comments?: K.CommentKind[] | null;
  name: string;
  optional: boolean;
  typeAnnotation?: K.TypeAnnotationKind | K.TSTypeAnnotationKind | null;
}

export interface JSXNamespacedName {
  loc?: K.SourceLocationKind | null;
  type: "JSXNamespacedName";
  comments?: K.CommentKind[] | null;
  namespace: K.JSXIdentifierKind;
  name: K.JSXIdentifierKind;
}

export interface JSXExpressionContainer {
  loc?: K.SourceLocationKind | null;
  type: "JSXExpressionContainer";
  comments?: K.CommentKind[] | null;
  expression: K.ExpressionKind;
}

export interface JSXMemberExpression {
  loc?: K.SourceLocationKind | null;
  type: "JSXMemberExpression";
  comments?: K.CommentKind[] | null;
  object: K.JSXIdentifierKind | K.JSXMemberExpressionKind;
  property: K.JSXIdentifierKind;
  computed: boolean;
}

export interface JSXSpreadAttribute {
  loc?: K.SourceLocationKind | null;
  type: "JSXSpreadAttribute";
  comments?: K.CommentKind[] | null;
  argument: K.ExpressionKind;
}

export interface JSXElement {
  loc?: K.SourceLocationKind | null;
  type: "JSXElement";
  comments?: K.CommentKind[] | null;
  openingElement: K.JSXOpeningElementKind;
  closingElement?: K.JSXClosingElementKind | null;
  children: (K.JSXElementKind | K.JSXExpressionContainerKind | K.JSXFragmentKind | K.JSXTextKind | K.LiteralKind)[];
  name: K.JSXIdentifierKind | K.JSXNamespacedNameKind | K.JSXMemberExpressionKind;
  selfClosing: boolean;
  attributes: (K.JSXAttributeKind | K.JSXSpreadAttributeKind)[];
}

export interface JSXOpeningElement {
  loc?: K.SourceLocationKind | null;
  type: "JSXOpeningElement";
  comments?: K.CommentKind[] | null;
  name: K.JSXIdentifierKind | K.JSXNamespacedNameKind | K.JSXMemberExpressionKind;
  attributes: (K.JSXAttributeKind | K.JSXSpreadAttributeKind)[];
  selfClosing: boolean;
}

export interface JSXClosingElement {
  loc?: K.SourceLocationKind | null;
  type: "JSXClosingElement";
  comments?: K.CommentKind[] | null;
  name: K.JSXIdentifierKind | K.JSXNamespacedNameKind | K.JSXMemberExpressionKind;
}

export interface JSXFragment {
  loc?: K.SourceLocationKind | null;
  type: "JSXFragment";
  comments?: K.CommentKind[] | null;
  openingElement: K.JSXOpeningFragmentKind;
  closingElement: K.JSXClosingFragmentKind;
  children: (K.JSXElementKind | K.JSXExpressionContainerKind | K.JSXFragmentKind | K.JSXTextKind | K.LiteralKind)[];
}

export interface JSXText {
  loc?: K.SourceLocationKind | null;
  type: "JSXText";
  comments?: K.CommentKind[] | null;
  value: string;
  regex?: {
    "pattern": string,
    "flags": string
  } | null;
}

export interface JSXOpeningFragment {
  loc?: K.SourceLocationKind | null;
  type: "JSXOpeningFragment";
  comments?: K.CommentKind[] | null;
}

export interface JSXClosingFragment {
  loc?: K.SourceLocationKind | null;
  type: "JSXClosingFragment";
  comments?: K.CommentKind[] | null;
}

export interface JSXEmptyExpression {
  loc?: K.SourceLocationKind | null;
  type: "JSXEmptyExpression";
  comments?: K.CommentKind[] | null;
}

export interface JSXSpreadChild {
  loc?: K.SourceLocationKind | null;
  type: "JSXSpreadChild";
  comments?: K.CommentKind[] | null;
  expression: K.ExpressionKind;
}

export interface Flow {
  loc?: K.SourceLocationKind | null;
  type: "Flow";
  comments?: K.CommentKind[] | null;
}

export interface FlowType {
  loc?: K.SourceLocationKind | null;
  type: "FlowType";
  comments?: K.CommentKind[] | null;
}

export interface AnyTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "AnyTypeAnnotation";
  comments?: K.CommentKind[] | null;
}

export interface EmptyTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "EmptyTypeAnnotation";
  comments?: K.CommentKind[] | null;
}

export interface MixedTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "MixedTypeAnnotation";
  comments?: K.CommentKind[] | null;
}

export interface VoidTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "VoidTypeAnnotation";
  comments?: K.CommentKind[] | null;
}

export interface NumberTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "NumberTypeAnnotation";
  comments?: K.CommentKind[] | null;
}

export interface NumberLiteralTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "NumberLiteralTypeAnnotation";
  comments?: K.CommentKind[] | null;
  value: number;
  raw: string;
}

export interface NumericLiteralTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "NumericLiteralTypeAnnotation";
  comments?: K.CommentKind[] | null;
  value: number;
  raw: string;
}

export interface StringTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "StringTypeAnnotation";
  comments?: K.CommentKind[] | null;
}

export interface StringLiteralTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "StringLiteralTypeAnnotation";
  comments?: K.CommentKind[] | null;
  value: string;
  raw: string;
}

export interface BooleanTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "BooleanTypeAnnotation";
  comments?: K.CommentKind[] | null;
}

export interface BooleanLiteralTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "BooleanLiteralTypeAnnotation";
  comments?: K.CommentKind[] | null;
  value: boolean;
  raw: string;
}

export interface NullableTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "NullableTypeAnnotation";
  comments?: K.CommentKind[] | null;
  typeAnnotation: K.FlowTypeKind;
}

export interface NullLiteralTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "NullLiteralTypeAnnotation";
  comments?: K.CommentKind[] | null;
}

export interface NullTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "NullTypeAnnotation";
  comments?: K.CommentKind[] | null;
}

export interface ThisTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "ThisTypeAnnotation";
  comments?: K.CommentKind[] | null;
}

export interface ExistsTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "ExistsTypeAnnotation";
  comments?: K.CommentKind[] | null;
}

export interface ExistentialTypeParam {
  loc?: K.SourceLocationKind | null;
  type: "ExistentialTypeParam";
  comments?: K.CommentKind[] | null;
}

export interface FunctionTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "FunctionTypeAnnotation";
  comments?: K.CommentKind[] | null;
  params: K.FunctionTypeParamKind[];
  returnType: K.FlowTypeKind;
  rest?: K.FunctionTypeParamKind | null;
  typeParameters?: K.TypeParameterDeclarationKind | null;
}

export interface FunctionTypeParam {
  loc?: K.SourceLocationKind | null;
  type: "FunctionTypeParam";
  comments?: K.CommentKind[] | null;
  name: K.IdentifierKind;
  typeAnnotation: K.FlowTypeKind;
  optional: boolean;
}

export interface TypeParameterDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "TypeParameterDeclaration";
  comments?: K.CommentKind[] | null;
  params: K.TypeParameterKind[];
}

export interface ArrayTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "ArrayTypeAnnotation";
  comments?: K.CommentKind[] | null;
  elementType: K.FlowTypeKind;
}

export interface ObjectTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "ObjectTypeAnnotation";
  comments?: K.CommentKind[] | null;
  properties: (K.ObjectTypePropertyKind | K.ObjectTypeSpreadPropertyKind)[];
  indexers: K.ObjectTypeIndexerKind[];
  callProperties: K.ObjectTypeCallPropertyKind[];
  exact: boolean;
}

export interface ObjectTypeProperty {
  loc?: K.SourceLocationKind | null;
  type: "ObjectTypeProperty";
  comments?: K.CommentKind[] | null;
  key: K.LiteralKind | K.IdentifierKind;
  value: K.FlowTypeKind;
  optional: boolean;
  variance?: K.VarianceKind | "plus" | "minus" | null;
}

export interface ObjectTypeSpreadProperty {
  loc?: K.SourceLocationKind | null;
  type: "ObjectTypeSpreadProperty";
  comments?: K.CommentKind[] | null;
  argument: K.FlowTypeKind;
}

export interface ObjectTypeIndexer {
  loc?: K.SourceLocationKind | null;
  type: "ObjectTypeIndexer";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
  key: K.FlowTypeKind;
  value: K.FlowTypeKind;
  variance?: K.VarianceKind | "plus" | "minus" | null;
}

export interface ObjectTypeCallProperty {
  loc?: K.SourceLocationKind | null;
  type: "ObjectTypeCallProperty";
  comments?: K.CommentKind[] | null;
  value: K.FunctionTypeAnnotationKind;
  static: boolean;
}

export interface Variance {
  loc?: K.SourceLocationKind | null;
  type: "Variance";
  comments?: K.CommentKind[] | null;
  kind: "plus" | "minus";
}

export interface QualifiedTypeIdentifier {
  loc?: K.SourceLocationKind | null;
  type: "QualifiedTypeIdentifier";
  comments?: K.CommentKind[] | null;
  qualification: K.IdentifierKind | K.QualifiedTypeIdentifierKind;
  id: K.IdentifierKind;
}

export interface GenericTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "GenericTypeAnnotation";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind | K.QualifiedTypeIdentifierKind;
  typeParameters?: K.TypeParameterInstantiationKind | null;
}

export interface TypeParameterInstantiation {
  loc?: K.SourceLocationKind | null;
  type: "TypeParameterInstantiation";
  comments?: K.CommentKind[] | null;
  params: K.FlowTypeKind[];
}

export interface MemberTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "MemberTypeAnnotation";
  comments?: K.CommentKind[] | null;
  object: K.IdentifierKind;
  property: K.MemberTypeAnnotationKind | K.GenericTypeAnnotationKind;
}

export interface UnionTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "UnionTypeAnnotation";
  comments?: K.CommentKind[] | null;
  types: K.FlowTypeKind[];
}

export interface IntersectionTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "IntersectionTypeAnnotation";
  comments?: K.CommentKind[] | null;
  types: K.FlowTypeKind[];
}

export interface TypeofTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "TypeofTypeAnnotation";
  comments?: K.CommentKind[] | null;
  argument: K.FlowTypeKind;
}

export interface TypeParameter {
  loc?: K.SourceLocationKind | null;
  type: "TypeParameter";
  comments?: K.CommentKind[] | null;
  name: string;
  variance?: K.VarianceKind | "plus" | "minus" | null;
  bound?: K.TypeAnnotationKind | null;
}

export interface ClassImplements {
  loc?: K.SourceLocationKind | null;
  type: "ClassImplements";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
  superClass?: K.ExpressionKind | null;
  typeParameters?: K.TypeParameterInstantiationKind | null;
}

export interface InterfaceDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "InterfaceDeclaration";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
  typeParameters?: K.TypeParameterDeclarationKind | null;
  body: K.ObjectTypeAnnotationKind;
  extends: K.InterfaceExtendsKind[];
}

export interface InterfaceExtends {
  loc?: K.SourceLocationKind | null;
  type: "InterfaceExtends";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
  typeParameters?: K.TypeParameterInstantiationKind | null;
}

export interface DeclareInterface {
  loc?: K.SourceLocationKind | null;
  type: "DeclareInterface";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
  typeParameters?: K.TypeParameterDeclarationKind | null;
  body: K.ObjectTypeAnnotationKind;
  extends: K.InterfaceExtendsKind[];
}

export interface TypeAlias {
  loc?: K.SourceLocationKind | null;
  type: "TypeAlias";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
  typeParameters?: K.TypeParameterDeclarationKind | null;
  right: K.FlowTypeKind;
}

export interface OpaqueType {
  loc?: K.SourceLocationKind | null;
  type: "OpaqueType";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
  typeParameters?: K.TypeParameterDeclarationKind | null;
  implType: K.FlowTypeKind;
  superType: K.FlowTypeKind;
}

export interface DeclareTypeAlias {
  loc?: K.SourceLocationKind | null;
  type: "DeclareTypeAlias";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
  typeParameters?: K.TypeParameterDeclarationKind | null;
  right: K.FlowTypeKind;
}

export interface DeclareOpaqueType {
  loc?: K.SourceLocationKind | null;
  type: "DeclareOpaqueType";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
  typeParameters?: K.TypeParameterDeclarationKind | null;
  right: K.FlowTypeKind;
}

export interface TypeCastExpression {
  loc?: K.SourceLocationKind | null;
  type: "TypeCastExpression";
  comments?: K.CommentKind[] | null;
  expression: K.ExpressionKind;
  typeAnnotation: K.TypeAnnotationKind;
}

export interface TupleTypeAnnotation {
  loc?: K.SourceLocationKind | null;
  type: "TupleTypeAnnotation";
  comments?: K.CommentKind[] | null;
  types: K.FlowTypeKind[];
}

export interface DeclareVariable {
  loc?: K.SourceLocationKind | null;
  type: "DeclareVariable";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
}

export interface DeclareFunction {
  loc?: K.SourceLocationKind | null;
  type: "DeclareFunction";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
}

export interface DeclareClass {
  loc?: K.SourceLocationKind | null;
  type: "DeclareClass";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
  typeParameters?: K.TypeParameterDeclarationKind | null;
  body: K.ObjectTypeAnnotationKind;
  extends: K.InterfaceExtendsKind[];
}

export interface DeclareModule {
  loc?: K.SourceLocationKind | null;
  type: "DeclareModule";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind | K.LiteralKind;
  body: K.BlockStatementKind;
}

export interface DeclareModuleExports {
  loc?: K.SourceLocationKind | null;
  type: "DeclareModuleExports";
  comments?: K.CommentKind[] | null;
  typeAnnotation: K.TypeAnnotationKind;
}

export interface DeclareExportDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "DeclareExportDeclaration";
  comments?: K.CommentKind[] | null;
  default: boolean;
  declaration?: K.DeclareVariableKind | K.DeclareFunctionKind | K.DeclareClassKind | K.FlowTypeKind | null;
  specifiers: (K.ExportSpecifierKind | K.ExportBatchSpecifierKind)[];
  source?: K.LiteralKind | null;
}

export interface ExportSpecifier {
  loc?: K.SourceLocationKind | null;
  type: "ExportSpecifier";
  comments?: K.CommentKind[] | null;
  local?: K.IdentifierKind | null;
  id?: K.IdentifierKind | null;
  name?: K.IdentifierKind | null;
  exported: K.IdentifierKind;
}

export interface ExportBatchSpecifier {
  loc?: K.SourceLocationKind | null;
  type: "ExportBatchSpecifier";
  comments?: K.CommentKind[] | null;
}

export interface DeclareExportAllDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "DeclareExportAllDeclaration";
  comments?: K.CommentKind[] | null;
  source?: K.LiteralKind | null;
}

export interface FlowPredicate {
  loc?: K.SourceLocationKind | null;
  type: "FlowPredicate";
  comments?: K.CommentKind[] | null;
}

export interface InferredPredicate {
  loc?: K.SourceLocationKind | null;
  type: "InferredPredicate";
  comments?: K.CommentKind[] | null;
}

export interface DeclaredPredicate {
  loc?: K.SourceLocationKind | null;
  type: "DeclaredPredicate";
  comments?: K.CommentKind[] | null;
  value: K.ExpressionKind;
}

export interface ExportDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "ExportDeclaration";
  comments?: K.CommentKind[] | null;
  default: boolean;
  declaration?: K.DeclarationKind | K.ExpressionKind | null;
  specifiers: (K.ExportSpecifierKind | K.ExportBatchSpecifierKind)[];
  source?: K.LiteralKind | null;
}

export interface Block {
  loc?: K.SourceLocationKind | null;
  value: string;
  leading: boolean;
  trailing: boolean;
  type: "Block";
}

export interface Line {
  loc?: K.SourceLocationKind | null;
  value: string;
  leading: boolean;
  trailing: boolean;
  type: "Line";
}

export interface Noop {
  loc?: K.SourceLocationKind | null;
  type: "Noop";
  comments?: K.CommentKind[] | null;
}

export interface DoExpression {
  loc?: K.SourceLocationKind | null;
  type: "DoExpression";
  comments?: K.CommentKind[] | null;
  body: K.StatementKind[];
}

export interface Super {
  loc?: K.SourceLocationKind | null;
  type: "Super";
  comments?: K.CommentKind[] | null;
}

export interface BindExpression {
  loc?: K.SourceLocationKind | null;
  type: "BindExpression";
  comments?: K.CommentKind[] | null;
  object?: K.ExpressionKind | null;
  callee: K.ExpressionKind;
}

export interface Decorator {
  loc?: K.SourceLocationKind | null;
  type: "Decorator";
  comments?: K.CommentKind[] | null;
  expression: K.ExpressionKind;
}

export interface MetaProperty {
  loc?: K.SourceLocationKind | null;
  type: "MetaProperty";
  comments?: K.CommentKind[] | null;
  meta: K.IdentifierKind;
  property: K.IdentifierKind;
}

export interface ParenthesizedExpression {
  loc?: K.SourceLocationKind | null;
  type: "ParenthesizedExpression";
  comments?: K.CommentKind[] | null;
  expression: K.ExpressionKind;
}

export interface ExportDefaultDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "ExportDefaultDeclaration";
  comments?: K.CommentKind[] | null;
  declaration: K.DeclarationKind | K.ExpressionKind;
}

export interface ExportNamedDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "ExportNamedDeclaration";
  comments?: K.CommentKind[] | null;
  declaration?: K.DeclarationKind | null;
  specifiers: K.ExportSpecifierKind[];
  source?: K.LiteralKind | null;
}

export interface ExportNamespaceSpecifier {
  loc?: K.SourceLocationKind | null;
  type: "ExportNamespaceSpecifier";
  comments?: K.CommentKind[] | null;
  exported: K.IdentifierKind;
}

export interface ExportDefaultSpecifier {
  loc?: K.SourceLocationKind | null;
  type: "ExportDefaultSpecifier";
  comments?: K.CommentKind[] | null;
  exported: K.IdentifierKind;
}

export interface ExportAllDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "ExportAllDeclaration";
  comments?: K.CommentKind[] | null;
  exported?: K.IdentifierKind | null;
  source: K.LiteralKind;
}

export interface CommentBlock {
  loc?: K.SourceLocationKind | null;
  value: string;
  leading: boolean;
  trailing: boolean;
  type: "CommentBlock";
}

export interface CommentLine {
  loc?: K.SourceLocationKind | null;
  value: string;
  leading: boolean;
  trailing: boolean;
  type: "CommentLine";
}

export interface Directive {
  loc?: K.SourceLocationKind | null;
  type: "Directive";
  comments?: K.CommentKind[] | null;
  value: K.DirectiveLiteralKind;
}

export interface DirectiveLiteral {
  loc?: K.SourceLocationKind | null;
  type: "DirectiveLiteral";
  comments?: K.CommentKind[] | null;
  value: string;
}

export interface StringLiteral {
  loc?: K.SourceLocationKind | null;
  type: "StringLiteral";
  comments?: K.CommentKind[] | null;
  value: string;
  regex?: {
    "pattern": string,
    "flags": string
  } | null;
}

export interface NumericLiteral {
  loc?: K.SourceLocationKind | null;
  type: "NumericLiteral";
  comments?: K.CommentKind[] | null;
  value: number;
  regex?: {
    "pattern": string,
    "flags": string
  } | null;
  raw?: string | null;
  extra: {
    "rawValue": number,
    "raw": string
  };
}

export interface BigIntLiteral {
  loc?: K.SourceLocationKind | null;
  type: "BigIntLiteral";
  comments?: K.CommentKind[] | null;
  value: string | number;
  regex?: {
    "pattern": string,
    "flags": string
  } | null;
  extra: {
    "rawValue": string,
    "raw": string
  };
}

export interface NullLiteral {
  loc?: K.SourceLocationKind | null;
  type: "NullLiteral";
  comments?: K.CommentKind[] | null;
  value?: null;
  regex?: {
    "pattern": string,
    "flags": string
  } | null;
}

export interface BooleanLiteral {
  loc?: K.SourceLocationKind | null;
  type: "BooleanLiteral";
  comments?: K.CommentKind[] | null;
  value: boolean;
  regex?: {
    "pattern": string,
    "flags": string
  } | null;
}

export interface RegExpLiteral {
  loc?: K.SourceLocationKind | null;
  type: "RegExpLiteral";
  comments?: K.CommentKind[] | null;
  value: RegExp;
  regex?: {
    "pattern": string,
    "flags": string
  } | null;
  pattern: string;
  flags: string;
}

export interface ObjectMethod {
  loc?: K.SourceLocationKind | null;
  type: "ObjectMethod";
  comments?: K.CommentKind[] | null;
  id?: K.IdentifierKind | null;
  params: K.PatternKind[];
  body: K.BlockStatementKind;
  generator: boolean;
  expression: boolean;
  defaults: (K.ExpressionKind | null)[];
  rest?: K.IdentifierKind | null;
  async: boolean;
  returnType?: K.TypeAnnotationKind | null;
  typeParameters?: K.TypeParameterDeclarationKind | null;
  kind: "method" | "get" | "set";
  key: K.LiteralKind | K.IdentifierKind | K.ExpressionKind;
  computed: boolean;
  accessibility?: K.LiteralKind | null;
  decorators?: K.DecoratorKind[] | null;
}

export interface ObjectProperty {
  loc?: K.SourceLocationKind | null;
  type: "ObjectProperty";
  comments?: K.CommentKind[] | null;
  key: K.LiteralKind | K.IdentifierKind | K.ExpressionKind;
  value: K.ExpressionKind | K.PatternKind;
  accessibility?: K.LiteralKind | null;
  computed: boolean;
}

export interface ClassMethod {
  loc?: K.SourceLocationKind | null;
  type: "ClassMethod";
  comments?: K.CommentKind[] | null;
  id?: K.IdentifierKind | null;
  params: K.PatternKind[];
  body: K.BlockStatementKind;
  generator: boolean;
  expression: boolean;
  defaults: (K.ExpressionKind | null)[];
  rest?: K.IdentifierKind | null;
  async: boolean;
  returnType?: K.TypeAnnotationKind | null;
  typeParameters?: K.TypeParameterDeclarationKind | null;
  kind: "get" | "set" | "method" | "constructor";
  key: K.LiteralKind | K.IdentifierKind | K.ExpressionKind;
  computed: boolean;
  static: boolean;
  decorators?: K.DecoratorKind[] | null;
}

export interface RestProperty {
  loc?: K.SourceLocationKind | null;
  type: "RestProperty";
  comments?: K.CommentKind[] | null;
  argument: K.ExpressionKind;
}

export interface ForAwaitStatement {
  loc?: K.SourceLocationKind | null;
  type: "ForAwaitStatement";
  comments?: K.CommentKind[] | null;
  left: K.VariableDeclarationKind | K.ExpressionKind;
  right: K.ExpressionKind;
  body: K.StatementKind;
}

export interface Import {
  loc?: K.SourceLocationKind | null;
  type: "Import";
  comments?: K.CommentKind[] | null;
}

export interface TSType {
  loc?: K.SourceLocationKind | null;
  type: "TSType";
  comments?: K.CommentKind[] | null;
}

export interface TSQualifiedName {
  loc?: K.SourceLocationKind | null;
  type: "TSQualifiedName";
  comments?: K.CommentKind[] | null;
  left: K.IdentifierKind | K.TSQualifiedNameKind;
  right: K.IdentifierKind | K.TSQualifiedNameKind;
}

export interface TSTypeReference {
  loc?: K.SourceLocationKind | null;
  type: "TSTypeReference";
  comments?: K.CommentKind[] | null;
  typeName: K.IdentifierKind | K.TSQualifiedNameKind;
  typeParameters?: K.TSTypeParameterInstantiationKind | null;
}

export interface TSTypeParameterInstantiation {
  loc?: K.SourceLocationKind | null;
  type: "TSTypeParameterInstantiation";
  comments?: K.CommentKind[] | null;
  params: K.TSTypeKind[];
}

export interface TSHasOptionalTypeParameters {
  typeParameters?: K.TSTypeParameterDeclarationKind | null;
}

export interface TSTypeParameterDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "TSTypeParameterDeclaration";
  comments?: K.CommentKind[] | null;
  params: K.TSTypeParameterKind[];
}

export interface TSHasOptionalTypeAnnotation {
  typeAnnotation?: K.TSTypeAnnotationKind | null;
}

export interface TSAsExpression {
  loc?: K.SourceLocationKind | null;
  type: "TSAsExpression";
  comments?: K.CommentKind[] | null;
  expression: K.ExpressionKind;
  typeAnnotation: K.TSTypeKind;
  extra?: {
    "parenthesized": boolean
  } | null;
}

export interface TSNonNullExpression {
  loc?: K.SourceLocationKind | null;
  type: "TSNonNullExpression";
  comments?: K.CommentKind[] | null;
  expression: K.ExpressionKind;
}

export interface TSAnyKeyword {
  loc?: K.SourceLocationKind | null;
  type: "TSAnyKeyword";
  comments?: K.CommentKind[] | null;
}

export interface TSBooleanKeyword {
  loc?: K.SourceLocationKind | null;
  type: "TSBooleanKeyword";
  comments?: K.CommentKind[] | null;
}

export interface TSNeverKeyword {
  loc?: K.SourceLocationKind | null;
  type: "TSNeverKeyword";
  comments?: K.CommentKind[] | null;
}

export interface TSNullKeyword {
  loc?: K.SourceLocationKind | null;
  type: "TSNullKeyword";
  comments?: K.CommentKind[] | null;
}

export interface TSNumberKeyword {
  loc?: K.SourceLocationKind | null;
  type: "TSNumberKeyword";
  comments?: K.CommentKind[] | null;
}

export interface TSObjectKeyword {
  loc?: K.SourceLocationKind | null;
  type: "TSObjectKeyword";
  comments?: K.CommentKind[] | null;
}

export interface TSStringKeyword {
  loc?: K.SourceLocationKind | null;
  type: "TSStringKeyword";
  comments?: K.CommentKind[] | null;
}

export interface TSSymbolKeyword {
  loc?: K.SourceLocationKind | null;
  type: "TSSymbolKeyword";
  comments?: K.CommentKind[] | null;
}

export interface TSUndefinedKeyword {
  loc?: K.SourceLocationKind | null;
  type: "TSUndefinedKeyword";
  comments?: K.CommentKind[] | null;
}

export interface TSUnknownKeyword {
  loc?: K.SourceLocationKind | null;
  type: "TSUnknownKeyword";
  comments?: K.CommentKind[] | null;
}

export interface TSVoidKeyword {
  loc?: K.SourceLocationKind | null;
  type: "TSVoidKeyword";
  comments?: K.CommentKind[] | null;
}

export interface TSThisType {
  loc?: K.SourceLocationKind | null;
  type: "TSThisType";
  comments?: K.CommentKind[] | null;
}

export interface TSArrayType {
  loc?: K.SourceLocationKind | null;
  type: "TSArrayType";
  comments?: K.CommentKind[] | null;
  elementType: K.TSTypeKind;
}

export interface TSLiteralType {
  loc?: K.SourceLocationKind | null;
  type: "TSLiteralType";
  comments?: K.CommentKind[] | null;
  literal: K.NumericLiteralKind | K.StringLiteralKind | K.BooleanLiteralKind;
}

export interface TSUnionType {
  loc?: K.SourceLocationKind | null;
  type: "TSUnionType";
  comments?: K.CommentKind[] | null;
  types: K.TSTypeKind[];
}

export interface TSIntersectionType {
  loc?: K.SourceLocationKind | null;
  type: "TSIntersectionType";
  comments?: K.CommentKind[] | null;
  types: K.TSTypeKind[];
}

export interface TSConditionalType {
  loc?: K.SourceLocationKind | null;
  type: "TSConditionalType";
  comments?: K.CommentKind[] | null;
  checkType: K.TSTypeKind;
  extendsType: K.TSTypeKind;
  trueType: K.TSTypeKind;
  falseType: K.TSTypeKind;
}

export interface TSInferType {
  loc?: K.SourceLocationKind | null;
  type: "TSInferType";
  comments?: K.CommentKind[] | null;
  typeParameter: K.TSTypeParameterKind;
}

export interface TSTypeParameter {
  loc?: K.SourceLocationKind | null;
  type: "TSTypeParameter";
  comments?: K.CommentKind[] | null;
  name: string;
  optional: boolean;
  typeAnnotation?: K.TypeAnnotationKind | K.TSTypeAnnotationKind | null;
  constraint?: K.TSTypeKind | null;
  default?: K.TSTypeKind | null;
}

export interface TSParenthesizedType {
  loc?: K.SourceLocationKind | null;
  type: "TSParenthesizedType";
  comments?: K.CommentKind[] | null;
  typeAnnotation: K.TSTypeKind;
}

export interface TSFunctionType {
  loc?: K.SourceLocationKind | null;
  type: "TSFunctionType";
  comments?: K.CommentKind[] | null;
  typeParameters?: K.TSTypeParameterDeclarationKind | null;
  typeAnnotation?: K.TSTypeAnnotationKind | null;
  parameters: (K.IdentifierKind | K.RestElementKind)[];
}

export interface TSConstructorType {
  loc?: K.SourceLocationKind | null;
  type: "TSConstructorType";
  comments?: K.CommentKind[] | null;
  typeParameters?: K.TSTypeParameterDeclarationKind | null;
  typeAnnotation?: K.TSTypeAnnotationKind | null;
  parameters: (K.IdentifierKind | K.RestElementKind)[];
}

export interface TSDeclareFunction {
  loc?: K.SourceLocationKind | null;
  type: "TSDeclareFunction";
  comments?: K.CommentKind[] | null;
  typeParameters?: K.TSTypeParameterDeclarationKind | null;
  declare: boolean;
  async: boolean;
  generator: boolean;
  id?: K.IdentifierKind | null;
  params: K.PatternKind[];
  returnType?: K.TSTypeAnnotationKind | K.NoopKind | null;
}

export interface TSDeclareMethod {
  loc?: K.SourceLocationKind | null;
  type: "TSDeclareMethod";
  comments?: K.CommentKind[] | null;
  typeParameters?: K.TSTypeParameterDeclarationKind | null;
  async: boolean;
  generator: boolean;
  params: K.PatternKind[];
  abstract: boolean;
  accessibility: "public" | "private" | "protected" | "undefined";
  static: boolean;
  computed: boolean;
  optional: boolean;
  key: K.IdentifierKind | K.StringLiteralKind | K.NumericLiteralKind | K.ExpressionKind;
  kind: "get" | "set" | "method" | "constructor";
  access: "public" | "private" | "protected" | "undefined";
  decorators?: K.DecoratorKind[] | null;
  returnType?: K.TSTypeAnnotationKind | K.NoopKind | null;
}

export interface TSMappedType {
  loc?: K.SourceLocationKind | null;
  type: "TSMappedType";
  comments?: K.CommentKind[] | null;
  readonly: boolean;
  typeParameter: K.TSTypeParameterKind;
  optional: boolean;
  typeAnnotation?: K.TSTypeKind | null;
}

export interface TSTupleType {
  loc?: K.SourceLocationKind | null;
  type: "TSTupleType";
  comments?: K.CommentKind[] | null;
  elementTypes: K.TSTypeKind[];
}

export interface TSRestType {
  loc?: K.SourceLocationKind | null;
  type: "TSRestType";
  comments?: K.CommentKind[] | null;
  typeAnnotation: K.TSTypeKind;
}

export interface TSOptionalType {
  loc?: K.SourceLocationKind | null;
  type: "TSOptionalType";
  comments?: K.CommentKind[] | null;
  typeAnnotation: K.TSTypeKind;
}

export interface TSIndexedAccessType {
  loc?: K.SourceLocationKind | null;
  type: "TSIndexedAccessType";
  comments?: K.CommentKind[] | null;
  objectType: K.TSTypeKind;
  indexType: K.TSTypeKind;
}

export interface TSTypeOperator {
  loc?: K.SourceLocationKind | null;
  type: "TSTypeOperator";
  comments?: K.CommentKind[] | null;
  operator: string;
  typeAnnotation: K.TSTypeKind;
}

export interface TSIndexSignature {
  loc?: K.SourceLocationKind | null;
  type: "TSIndexSignature";
  comments?: K.CommentKind[] | null;
  typeAnnotation?: K.TSTypeAnnotationKind | null;
  parameters: K.IdentifierKind[];
  readonly: boolean;
}

export interface TSPropertySignature {
  loc?: K.SourceLocationKind | null;
  type: "TSPropertySignature";
  comments?: K.CommentKind[] | null;
  typeAnnotation?: K.TSTypeAnnotationKind | null;
  key: K.ExpressionKind;
  computed: boolean;
  readonly: boolean;
  optional: boolean;
  initializer?: K.ExpressionKind | null;
}

export interface TSMethodSignature {
  loc?: K.SourceLocationKind | null;
  type: "TSMethodSignature";
  comments?: K.CommentKind[] | null;
  typeParameters?: K.TSTypeParameterDeclarationKind | null;
  typeAnnotation?: K.TSTypeAnnotationKind | null;
  key: K.ExpressionKind;
  computed: boolean;
  optional: boolean;
  parameters: (K.IdentifierKind | K.RestElementKind)[];
}

export interface TSTypePredicate {
  loc?: K.SourceLocationKind | null;
  type: "TSTypePredicate";
  comments?: K.CommentKind[] | null;
  typeAnnotation: K.TSTypeAnnotationKind;
  parameterName: K.IdentifierKind | K.TSThisTypeKind;
}

export interface TSCallSignatureDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "TSCallSignatureDeclaration";
  comments?: K.CommentKind[] | null;
  typeParameters?: K.TSTypeParameterDeclarationKind | null;
  typeAnnotation?: K.TSTypeAnnotationKind | null;
  parameters: (K.IdentifierKind | K.RestElementKind)[];
}

export interface TSConstructSignatureDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "TSConstructSignatureDeclaration";
  comments?: K.CommentKind[] | null;
  typeParameters?: K.TSTypeParameterDeclarationKind | null;
  typeAnnotation?: K.TSTypeAnnotationKind | null;
  parameters: (K.IdentifierKind | K.RestElementKind)[];
}

export interface TSEnumMember {
  loc?: K.SourceLocationKind | null;
  type: "TSEnumMember";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind | K.StringLiteralKind;
  initializer?: K.ExpressionKind | null;
}

export interface TSTypeQuery {
  loc?: K.SourceLocationKind | null;
  type: "TSTypeQuery";
  comments?: K.CommentKind[] | null;
  exprName: K.IdentifierKind;
}

export interface TSTypeLiteral {
  loc?: K.SourceLocationKind | null;
  type: "TSTypeLiteral";
  comments?: K.CommentKind[] | null;
  members: (K.TSCallSignatureDeclarationKind | K.TSConstructSignatureDeclarationKind | K.TSIndexSignatureKind | K.TSMethodSignatureKind | K.TSPropertySignatureKind)[];
}

export interface TSTypeAssertion {
  loc?: K.SourceLocationKind | null;
  type: "TSTypeAssertion";
  comments?: K.CommentKind[] | null;
  typeAnnotation: K.TSTypeKind;
  expression: K.ExpressionKind;
  extra?: {
    "parenthesized": boolean
  } | null;
}

export interface TSEnumDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "TSEnumDeclaration";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
  const: boolean;
  declare: boolean;
  members: K.TSEnumMemberKind[];
  initializer?: K.ExpressionKind | null;
}

export interface TSTypeAliasDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "TSTypeAliasDeclaration";
  comments?: K.CommentKind[] | null;
  typeParameters?: K.TSTypeParameterDeclarationKind | null;
  id: K.IdentifierKind;
  declare: boolean;
  typeAnnotation: K.TSTypeKind;
}

export interface TSModuleBlock {
  loc?: K.SourceLocationKind | null;
  type: "TSModuleBlock";
  comments?: K.CommentKind[] | null;
  body: K.StatementKind[];
}

export interface TSModuleDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "TSModuleDeclaration";
  comments?: K.CommentKind[] | null;
  id: K.StringLiteralKind | K.IdentifierKind | K.TSQualifiedNameKind;
  declare: boolean;
  global: boolean;
  body?: K.TSModuleBlockKind | K.TSModuleDeclarationKind | null;
}

export interface TSImportEqualsDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "TSImportEqualsDeclaration";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
  isExport: boolean;
  moduleReference: K.IdentifierKind | K.TSQualifiedNameKind | K.TSExternalModuleReferenceKind;
}

export interface TSExternalModuleReference {
  loc?: K.SourceLocationKind | null;
  type: "TSExternalModuleReference";
  comments?: K.CommentKind[] | null;
  expression: K.StringLiteralKind;
}

export interface TSExportAssignment {
  loc?: K.SourceLocationKind | null;
  type: "TSExportAssignment";
  comments?: K.CommentKind[] | null;
  expression: K.ExpressionKind;
}

export interface TSNamespaceExportDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "TSNamespaceExportDeclaration";
  comments?: K.CommentKind[] | null;
  id: K.IdentifierKind;
}

export interface TSInterfaceBody {
  loc?: K.SourceLocationKind | null;
  type: "TSInterfaceBody";
  comments?: K.CommentKind[] | null;
  body: (K.TSCallSignatureDeclarationKind | K.TSConstructSignatureDeclarationKind | K.TSIndexSignatureKind | K.TSMethodSignatureKind | K.TSPropertySignatureKind)[];
}

export interface TSExpressionWithTypeArguments {
  loc?: K.SourceLocationKind | null;
  type: "TSExpressionWithTypeArguments";
  comments?: K.CommentKind[] | null;
  expression: K.IdentifierKind | K.TSQualifiedNameKind;
  typeParameters?: K.TSTypeParameterInstantiationKind | null;
}

export interface TSInterfaceDeclaration {
  loc?: K.SourceLocationKind | null;
  type: "TSInterfaceDeclaration";
  comments?: K.CommentKind[] | null;
  typeParameters?: K.TSTypeParameterDeclarationKind | null;
  id: K.IdentifierKind | K.TSQualifiedNameKind;
  declare: boolean;
  extends?: K.TSExpressionWithTypeArgumentsKind[] | null;
  body: K.TSInterfaceBodyKind;
}

export interface TSParameterProperty {
  loc?: K.SourceLocationKind | null;
  type: "TSParameterProperty";
  comments?: K.CommentKind[] | null;
  accessibility: "public" | "private" | "protected" | "undefined";
  readonly: boolean;
  parameter: K.IdentifierKind | K.AssignmentPatternKind;
}

export interface OptionalMemberExpression {
  loc?: K.SourceLocationKind | null;
  type: "OptionalMemberExpression";
  comments?: K.CommentKind[] | null;
  object: K.ExpressionKind;
  property: K.IdentifierKind | K.ExpressionKind;
  computed: boolean;
  optional: boolean;
}

export interface OptionalCallExpression {
  loc?: K.SourceLocationKind | null;
  type: "OptionalCallExpression";
  comments?: K.CommentKind[] | null;
  callee: K.ExpressionKind;
  arguments: (K.ExpressionKind | K.SpreadElementKind)[];
  optional: boolean;
}